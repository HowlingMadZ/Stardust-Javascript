<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
        <title>sketch.js Â» Basic Example</title>
        <link rel="stylesheet" href="sketch.js-Basic%20Example_files/example.css">
        <style type="text/css">
            html, body {
                background: #222;
            }
        </style>
    </head>
    <body>
	<div style="width:400px; background-color:white;padding:20px;border:1px dashed blue;">
		<h2>HTML Forms</h2>

		<form action="/action_page.php">
		  First name:<br>
		  <input type="text" name="firstname" value="Mickey">
		  <br>
		  Last name:<br>
		  <input type="text" name="lastname" value="Mouse" onclick="demo.mousedown()">
		  <br><br>
		  <button id="coolButton" type="submit" value="Submit" onClick="demo.burst(getElementById('coolButton'))">Submit</button>
		</form> 

		<p>If you click the "Submit" button, particles spawn from the button dimensions, going in all directions, but being attracted to a specific position.</p>
	</div>
        <div id="container" style="position:fixed;display:block;width:100px;height:100px;top:0px;pointer-events:none;"><canvas id="canv" class="sketch" style="height: 300px; width: 300px;border:1px solid white;" height="535" width="1920"></canvas></div>
        <script src="sketch.js-Basic%20Example_files/sketch.js"></script>
        <script>
		var img = new Image;
        //img.src = "http://pixeljoint.com/files/icons/full/tilesetmelkas.png";
		img.src = "https://clubpenguinislandhelp.files.wordpress.com/2017/04/cpi-coin.png?w=256";
        // ----------------------------------------
        // Particle
        // ----------------------------------------
		var attractorX = 1000;
		var attractorY = 300;
		var attractorRadius = 100;
		var attractorStrength = 1;
		var attractorEpsilon = 1;
		var attractorAttenuationPower = 0;
		
		var vec2DPool = [];
		
        function Particle() {
            this.init();
        }

        Particle.prototype = {
			
            init: function() {
				this.x = 0;
				this.y = 0;
				this.initScale = this.scale = 1;
				this.initAlpha = this.alpha = 1;
				this.initLife = this.life = 1;
				this.mass = 1;
				this.massless = false;//
				
                this.alive = true;//isDead = false;
				this.attractable = true;
				
                //this.wander = 0.15;
				this.wander = 0;
                //this.theta = random( TWO_PI );
				this.theta = 0;
                this.drag = 0.92;
				//this.drag = 1;//1 == no drag/no friction
                this.color = '#fff';
				
				this.dx = 0;
				this.dy = 0;

                this.vx = 0.0;
                this.vy = 0.0;
            },

            move: function() {
                this.x += this.vx;
                this.y += this.vy;

                this.vx *= this.drag;
                this.vy *= this.drag;
				
                //this.theta += random( -0.5, 0.5 ) * this.wander;
                //this.vx += sin( this.theta ) * 0.1;
                //this.vy += cos( this.theta ) * 0.1;
				
				if(this.attractable)
				{
					dx = this.x - attractorX;
					dy = this.y - attractorY;
					if(dx * dx + dy * dy <= attractorRadius * attractorRadius)//distance check without sqrt
					{
						//move to next waypoint
						//OR move to first waypoint if looping
						this.scale *= 0.8;
					}
					
					var r = vec2DPool.length ? vec2DPool.pop() : new Vec2D();
					r.init(dx, dy);
					var len = r.length;
					if(len < attractorEpsilon)
						len = attractorEpsilon;
					
					r.setLength(-attractorStrength * pow(len, -0.5 * attractorAttenuationPower));
					if(!this.massless)//use mass
						r.setLength(r.length /= this.mass);
					
					this.vx += r.x;
					this.vy += r.y;
					
					vec2DPool.push(r);//to be recycled
				}

				this.scale *= 0.98;
				this.alpha *= 0.98;
                this.alive = this.scale > 0.01;
            },

            draw: function( ctx ) {

                //ctx.beginPath();
                //ctx.arc( this.x, this.y, this.scale, 0, TWO_PI );
                //ctx.fillStyle = this.color;
                //ctx.fill();
				//ctx.globalAlpha = this.alpha;
				ctx.drawImage(img, 0, 0, 256, 256, this.x, this.y, 256*this.scale, 256*this.scale);
            }
        };
		
		function Vec2D() {
        }

        Vec2D.prototype = {
		
            init: function(x, y) {
				this.x = x;
				this.y = y;
				this.length = sqrt(x * x + y * y);
			},
			
			setLength: function(len){
				var factor = len / this.length;
				this.x = this.x * factor;
				this.y = this.y * factor;
				this.length = len;
			}
		};
        // ----------------------------------------
        // Example
        // ----------------------------------------

        var MAX_PARTICLES = 280;
        var COLOURS = [ '#69D2E7', '#A7DBD8', '#E0E4CC', '#F38630', '#FA6900', '#FF4E50', '#F9D423' ];

        var particles = [];
        var pool = [];
		
		var myCanvas = document.getElementById('canv');
		var myCtx = myCanvas.getContext('2d');

        var demo = Sketch.create({
		
			//type: Sketch.DOM,
			type: Sketch.CANVAS,
            //container: document.getElementById( 'container' ),
			container: myCanvas,
			//element: canvas,
			context: myCtx,
            retina: 'auto'
        });

        demo.setup = function() {

            // Set off some initial particles.
            var i, x, y;

            for ( i = 0; i < 20; i++ ) {
                x = ( demo.width * 0.5 ) + random( -100, 100 );
                y = ( demo.height * 0.5 ) + random( -100, 100 );
                demo.spawn( x, y );
            }
        };

        demo.spawn = function( x, y ) {
            
            var particle, theta, force;

            if ( particles.length >= MAX_PARTICLES )
                pool.push( particles.shift() );

            particle = pool.length ? pool.pop() : new Particle();
            particle.init();
			particle.x = x;
			particle.y = y;
			particle.vx = random(-30, 30);
			particle.vy = random(-30, 30);
			particle.initialScale = particle.scale = random(0.2, 0.3);
			this.initLife = this.life = 2;

            //particle.wander = random( 0.5, 2.0 );
            particle.color = random( COLOURS );
            //particle.drag = random( 0.9, 0.99 );

            //theta = random( TWO_PI );
            //force = random( 2, 8 );

            //particle.vx = sin( theta ) * force;
            //particle.vy = cos( theta ) * force;

            particles.push( particle );
        };

        demo.update = function() {

            var i, particle;

            for ( i = particles.length - 1; i >= 0; i-- ) {

                particle = particles[i];

                if ( particle.alive ) particle.move();
                else pool.push( particles.splice( i, 1 )[0] );
            }
        };

        demo.draw = function() {

            //demo.globalCompositeOperation  = 'lighter';
			demo.globalCompositeOperation  = 'source-over';

            for ( var i = particles.length - 1; i >= 0; i-- ) {
                particles[i].draw( demo );
            }
        };

        demo.mousemove = function() {

            /*var particle, theta, force, touch, max, i, j, n;

            for ( i = 0, n = demo.touches.length; i < n; i++ ) {

                touch = demo.touches[i], max = random( 1, 4 );
                for ( j = 0; j < max; j++ ) {
                  demo.spawn( touch.x, touch.y );
                }

            }*/
        };
        demo.mousedown = function (){
			var particle, theta, force, touch, particleAmount, i, j, n;

            for ( i = 0, n = demo.touches.length; i < n; i++ ) {

                touch = demo.touches[i];
				particleAmount = 30;//random( 10, 40 );
                for ( j = 0; j < particleAmount; j++ ) {
                  demo.spawn( touch.x, touch.y );
                }

            }
		}
		
        demo.burst = function (dom){
			
			var particleAmount, j, x, y;
			x = dom.x;
			y = dom.y;
			var rect = dom.getBoundingClientRect();
			x = (rect.right - rect.left)/2 + rect.left;
			y = (rect.bottom - rect.top)/2 + rect.top;
			//console.log(rect.top, rect.right, rect.bottom, rect.left);

			particleAmount = 30;//random( 10, 40 );
			for ( j = 0; j < particleAmount; j++ ) {
				var nx = x + random(-70, 70);
				var ny = y + random(-70, 70);
				demo.spawn(nx, ny);
			}
		}
        </script>
    

</body></html>